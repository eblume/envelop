---

- name: Install tmux dependencies
  apt: name="{{ packages }}" state=latest
  become: yes
  vars:
    packages:
      - libevent-dev
      - ncurses-dev
      - libncurses-dev  # unclear if both are needed
      - build-essential
      - automake
      - autoconf
      - pkg-config

- name: Clone or Update tmux repository
  git:
    repo: 'git@github.com:tmux/tmux.git'
    dest: "{{ nonwork_code_dir }}/tmux"
    version: "{{ tmux_version }}"
  register: tmux_git_result

- stat:
    path: "{{ user_bin_dir }}/tmux"
  register: tmux_bin

- name: (Re)build tmux
  include: build_tmux.yml
  when: tmux_git_result.changed or not tmux_bin.stat.exists

- name: Save tmux config
  template: src=tmux.conf.j2 dest="{{ ansible_env.HOME }}/.tmux.conf"
  register: tmux_config_result

- name: Tell tmux to source the config again
  when: tmux_config_result.changed  # this could also be a handler. hmm.
  command: "tmux source {{ ansible_env.HOME}}/.tmux.conf"

# Commented out while a patch waits on upstream to be merged
#- name: Install tmuxinator
#  gem: name=tmuxinator state=present user_install=no
#  become: yes
- name: Install tmuxinator from source
  include: build_tmuxinator.yml

- name: Create tmuxinator config dir
  file: path="{{ ansible_env.HOME }}/.config/tmuxinator" state=directory

- name: Install tmuxinator configs
  template: src="{{ item }}.yml.j2" dest="{{ ansible_env.HOME }}/.config/tmuxinator/{{ item }}.yml"
  with_items:
    - usual
    - devx-frontend
    - hermes
    - vpn

