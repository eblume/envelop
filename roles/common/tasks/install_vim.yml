---


# TODO: investigate 'delta' which plugs in to FZF and bat to give nice diff views
# https://github.com/dandavison/delta


- name: Install neovim dependencies (Debian)
  when: ansible_os_family == "Debian"
  apt: name="{{ packages }}" state=latest
  become: yes
  vars:
    packages:
      - ninja-build
      - gettext
      - libtool
      - libtool-bin
      - autoconf
      - automake
      - cmake
      - g++
      - pkg-config
      - unzip
      # The following packages aren't dependencies of neovim itself, but of plugins
      - fzf

- name: Install neovim dependencies (OS X)
  when: ansible_os_family == "Darwin"
  homebrew: name="{{ packages }}" state=latest path=/opt/homebrew/bin
  vars:
    packages:
      - ninja
      - gettext
      - libtool
      - autoconf
      - automake
      - cmake
      - pkg-config
      - unzip
      # The following packages aren't dependencies of neovim itself, but of plugins
      - fzf
      - bat
      - ripgrep


# Details: https://github.com/sharkdp/bat/issues/938
# (short version: ubuntu 20.04 has a bug with rust packages. Fixed in 20.10.)
- name: Install ripgrep and bat (Debian) with a special command to fix some BS
  when: ansible_os_family == "Debian"
  become: yes
  apt:
    name: "{{ packages }}"
    state: latest
    # force-confdef and force-confold are the default values.
    # force-overwrite fixes the issue with rust packages (for now).
    dpkg_options: force-confdef,force-confold,force-overwrite
  vars:
    packages:
      - ripgrep  # fast dev-grepping for fzf and ack
      - bat      # cat, but cooler. Provides colors and such for fzf.


- name: Create neovim dir
  file:
    state: directory
    path: "{{ nonwork_code_dir }}/neovim"

- name: Clone or Update neovim repository
  git:
    repo: 'git@github.com:neovim/neovim.git'
    dest: "{{ nonwork_code_dir }}/neovim"
    version: "{{ neovim_version }}"
    force: true
  register: neovim_git_result

- stat:
    path: "{{ user_bin_dir }}/nvim"
  register: neovim_bin

- name: (Re)build neovim
  include: build_neovim.yml
# Let's just build it every time. Leaving this in in case I decide to go back.
#  when: (neovim_git_result.after != neovim_git_result.before) or
#        (not neovim_bin.stat.exists)


# We also do these steps in build_neovim.yml, but there are times where we
# don't want to build neovim and yet still want this step. (Also that's broken right now)
- name: Create neovim config directory
  file: path="{{ ansible_env.HOME }}/.config/nvim" state=directory
- name: Save neovim config
  template:
    src: init.vim.j2
    dest: "{{ ansible_env.HOME }}/.config/nvim/init.vim"
    mode: "u=rw,g=,o="


- name: Install/Update neovim plugins
  command: "{{ user_bin_dir}}/nvim -c PlugUpdate -c quitall"
# Note to self: I tried to add a 'changed_when' here, and the closest I got to
# was that you can inspect the output of the PlugDiff command to see what was changed.
# I decided to give up before I figured out how to parse that out properly from the
# curses-style output.


- name: Install neovim package for python
  command: "pip install -U {{ item }}"
  with_items:
    - neovim
  register: pip_result
  changed_when: pip_result.rc == 0 and 'Successfully installed' in pip_result.stdout_lines[-1]

# There are also Ruby and Javascript providers we could do here


- name: Install coc.vim language servers
  command: "{{ user_bin_dir}}/nvim -c 'CocInstall coc-yaml coc-pyright' -c quitall"

- name: Create link to nvim called 'vim'
  file:
    src: "{{ user_bin_dir }}/nvim"
    dest: "{{ user_bin_dir }}/vim"
    state: link
