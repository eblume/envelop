---

- name: Install fish shell
  block:
    - name: "( ... Debian)"
      when: ansible_os_family == "Debian"
      become: yes
      apt: name=fish state=latest
    - name: "( ... OS X)"
      when: ansible_os_family == "Darwin"
      homebrew: name=fish state=latest

- name: Register fish (OS X only)
  become: yes
  command: grep -qF -- "{{ homebrew_prefix }}/bin/fish" /etc/shells || echo "{{ homebrew_prefix }}/bin/fish" >> /etc/shells
  when: ansible_os_family == "Darwin"

- name: change shell to fish
  become: yes
  user:
    name: '{{ansible_user_id}}'
    shell: '{{ fish_bin }}'
  register: shell_change

- fail:
    msg: "Your shell has changed, please create a new login shell (log out and log in)"
  when: shell_change.changed

- name: create fish config folders
  file: name="{{ ansible_env.HOME }}/.config/fish/{{ item  }}"  state=directory
  with_items:
    - completions
    - conf.d
    - functions

- name: install fish config
  template:
    dest: "{{ ansible_env.HOME }}/.config/fish/config.fish"
    src: config.fish.j2

- name: create fish env config
  template:
    src: 000-env.fish.j2
    dest: "{{ ansible_env.HOME }}/.config/fish/conf.d/000-env.fish"

- name: create fisher folder
  file:
    name: "{{ ansible_env.HOME }}/.config/fish/functions"
    state: directory

- name: install fisher
  git:
    repo: "git@github.com:jorgebucaran/fisher.git"
    dest: "{{ nonwork_code_dir }}/fisher"
    version: "{{ fisher_version }}"

- name: link fisher to fish functions
  file:
    src: "{{ nonwork_code_dir }}/fisher/fisher.fish"
    dest: "{{ ansible_env.HOME }}/.config/fish/functions/fisher.fish"
    state: link

# We could save ~1s if we parsed `fisher ls` first, but whatever :)
- name: Install fisher plugins
  command: "fish -c \"fisher {{ ' '.join(fisher_plugins) }}\""
  register: fisher_plugins_result
  changed_when:
    - fisher_plugins_result.stdout
    - not fisher_plugins_result.stdout.starts_with('No plugins to install')
  vars:
    fisher_plugins:
      - z
      - metro

# Powerline Fonts: this is to support metro, and it requires patching fonts
- name: Install powerline patched fonts (for metro fish prompt) (Debian only)
  become: yes
  apt: name=fonts-powerline state=latest
  when: ansible_os_family == "Debian"

  # This technically works on Linux too, maybe switch to only this?
- name: Install powerline patched fonts (OS X only)
  when: ansible_os_family == "Darwin"
  block:
    - name: Check out fonts
      git:
        repo: 'git@github.com:powerline/fonts.git'
        dest: "{{ nonwork_code_dir }}/powerline-fonts"
        version: HEAD
      register: fonts_git
    - name: Install fonts
      command: "{{ nonwork_code_dir}}/powerline-fonts/install.sh"
      when: fonts_git.changed
