" {{ ansible_managed }}
" vi:syntax=vim

" vim and fish dont play nice
set shell=bash

" Install vim-plug if needed
if empty(glob('~/.local/share/nvim/site/autoload/plug.vim'))
  silent !curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/bundle')

"""""""""""""""""""""""""
" NOTE TO SELF          "
" KEEP IT SIMPLE STUPID "
" ( ... woops ... )     "
"""""""""""""""""""""""""

" pretty pretty
Plug 'flazz/vim-colorschemes'

" use gS and gJ to format oneliners to multiliners and vice versa
Plug 'AndrewRadev/splitjoin.vim'

" Some sensible defaults
Plug 'tpope/vim-sensible'

" Surround, use it, love it
" use cs"' to change " to '
" use cs'<q> to change it to <q></q>
" use cst" to go back to "
" ds" deletes the "
" ysiw] (iw for 'inner word') to surround a word like [this]
" cs]{ -- change [ to { with a space (use } to avoid the space)
" others as well... one last example for when in Visual mode (V)
" select, then S<p class="important"> -- surrounds your selection with a p!
Plug 'tpope/vim-surround'

" Ansible syntax
Plug 'pearofducks/ansible-vim', { 'do': 'cd ./UltiSnips; ./generate.py' }

" FZF file search
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }

" Ctrl-P, mostly just for the MRU files, bufs, and tags search. FZF is nicer for files.
Plug 'kien/ctrlp.vim'

" Syntax support for 100+ languages
Plug 'sheerun/vim-polyglot'

" vim-airline
Plug 'vim-airline/vim-airline'

" Ag (via Ack)
Plug 'mileszs/ack.vim'

" vim Dim Inactive Windows
Plug 'blueyed/vim-diminactive'

" fugitive (git integration, rhubarb is for github specifically)
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'

" git gutter
Plug 'airblade/vim-gitgutter'

" javascript
Plug 'pangloss/vim-javascript'

" tmux focus events
Plug 'tmux-plugins/vim-tmux-focus-events'

" pairs
" Bundle 'jiangmiao/auto-pairs'

" Asynchronous Linting
Plug 'w0rp/ale'

" unimpaired - Toggle Everything
Plug 'tpope/vim-unimpaired'

" vim-vinegar, enhancements to netrw
Plug 'tpope/vim-vinegar'

" tagbar - for displaying tags, press F8
Plug 'majutsushi/tagbar'

" vim-eunuch, linux CLI stuff like :Move, :Rename, etc.
Plug 'tpope/vim-eunuch'
" All of your Plugins must be added before the following line
call plug#end()
""""""""""""""" End of plugins stuff

" Always try to syntax highlight... I rarely write bare prose.
syntax on

" Enable 256 colors (let's try keeping this off for a while, see how we do)
" set t_Co=256

" Fix backspace indentation
" set backspace=indent,eol,start " temp disabling, just to see what's up

" Disable bells... don't know why it's on anyway
set noerrorbells visualbell t_vb=
if has('autocmd')
    autocmd GUIEnter * set visualbell t_vb=
endif

" Enable mouse everywhere
" set mouse=a (no, bad! stop using your mouse!)

" Hide mouse pointer while typing
set mousehide
set mousemodel=popup

" Disable swapfiles, they don't seem to ever help
set noswapfile

" Set persistent undo (v7.3 only)
set undodir=~/.vim/undodir
set undofile

" Move backup files to ~/.vim/sessions
set backupdir=~/.vim/sessions
set dir=~/.vim/sessions

" Syntax highlight syncing from the top of the file (fixes Python)
autocmd BufEnter * :syntax sync fromstart

" Set <Leader> to ' ' and <localleader> to ","
let mapleader=" "
let maplocalleader=","

" Take off the training wheels
inoremap  <Up>     <NOP>
inoremap  <Down>   <NOP>
inoremap  <Left>   <NOP>
inoremap  <Right>  <NOP>
vnoremap  <Up>     <NOP>
vnoremap  <Down>   <NOP>
vnoremap  <Left>   <NOP>
vnoremap  <Right>  <NOP>
nnoremap  <Up>     <NOP>
nnoremap  <Down>   <NOP>
nnoremap  <Left>   <NOP>
nnoremap  <Right>  <NOP>

" Enable automatic title setting for terminals
" (I'm turning this off temporarily to see if I like the default better)
" set title
" set titleold="Terminal"
" set titlestring=%F\ -\ Vim

" Activate a permanent ruler
set ruler

" Disable the blinking cursor
set gcr=a:blinkon0

" Every term I use is fast, sheesh
set ttyfast

" Global substitution regexes by default
set gdefault

" Copy/Paste to and from Desktop Environment
noremap <leader>yy "+y
noremap <leader>pp "+gP

" FZF search
nnoremap <leader>s :<C-u>FZF<CR>

" Ack (Ag/ripgrep)
nnoremap <leader>a :Ack!<Space>

" set cmdheight=2
set laststatus=2
set showcmd
set showmode
set number relativenumber

"""""""""" Tab Settings
" This is commented out because I think maybe it's causing tabbing issues
"
" set smarttab
set autoindent
"
" These are commented out so I can use per-language tabs, I hope.
"
" set softtabstop=4
" set shiftwidth=4
" set tabstop=4
set expandtab

" utf-8 default encoding
set enc=utf-8

" Prefer unix over windows over os9 formats
set fileformats=unix,dos,mac

" Keep more lines for scope
set scrolloff=5

" some netrw setup
let g:netrw_liststyle = 3  " tree view
let g:netrw_list_hide = '.\(pyc\|pyo\|o\)$' " hide some files and remove stupid help
let g:netrw_banner = 0

" Disable the help key entirely
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

" <leader>[v,h] opens a [vertical/horizontal] split window and selects it.
nnoremap <leader>v <C-w>v<C-w>l
nnoremap <leader>h <C-w>h<C-w>l

" Hold Ctrl and use hjkl to move through window panes
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Configure editor for a 100 column width
set colorcolumn=100
set textwidth=100
highlight ColorColumn ctermbg=235
let &colorcolumn=join(range(101,999),",")
set formatoptions-=t  " Don't linewrap automatically while we are typing please
set formatoptions+=q  " but do allow gq to work
" set formatoptions-=c  " This disables automatic linewrap for comments.

" Don't add spaces when joining lines to avoid weird text errors.
" Might need to revisit this if non-prose joining gets wonky.
set nojoinspaces

" Ignore pyc files
set wildignore=*.pyc

" YAML files need 2 space indentation
au FileType yaml setlocal tabstop=2 expandtab shiftwidth=2 softtabstop=2

" JS files need 2 space indentation
au FileType javascript setlocal tabstop=2 expandtab shiftwidth=2 softtabstop=2

" RST files get 4 because it plays nice with python/doctest
au FileType rst setlocal tabstop=4 expandtab shiftwidth=4 softtabstop=4

" json
au FileType json setlocal tabstop=2 expandtab shiftwidth=2 softtabstop=2

" copy/paste in linux
set clipboard+=unnamedplus

" Airline config (for statusline)
let g:airline#parts#ffenc#skip_expected_string='utf-8[unix]'  " If it's utf-8 I don't care
" This next one is because I can't possibly imagine caring about the % through a doc
let g:airline_section_z = airline#section#create(['', 'linenr', 'maxlinenr', '%3v'])
if !exists("g:airline_symbols")
  let g:airline_symbols={}
endif
let g:airline_symbols.linenr=''

" Linting
let g:ale_sign_column_always = 1 " always show the gutter
let g:airline#extensions#ale#enabled = 1
" to change gutter symbols:
" let g:ale_sign_error = '>>'
" let g:ale_sign_warning = '..'
" to change gutter colors:
" highlight clear ALEErrorSign
" highlight clear ALEWarningSign
let g:ale_linters = {
\  'javascript': ['eslint'],
\  'python': ['flake8', 'black', 'mypy'],
\}
let g:ale_fixers = {
\  '*': ['remove_trailing_lines', 'trim_whitespace'],
\  'python': [
\     'remove_trailing_lines',
\     'trim_whitespace',
\     'isort',
\     'black'
\   ],
\  'javascript': ['prettier_standard', 'remove_trailing_lines', 'trim_whitespace'],
\}

" Ack.vim - use ripgrep when able
if executable('rg')
  let g:ackprg = 'rg --vimgrep --no-heading'
elseif executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

" Map :cclose to a <leader>c to close out the quickfix window, as created by Ack
nnoremap <leader>c :cclose<CR>

" Tagbar on F8
nmap <F8> :TagbarOpenAutoClose<CR>

" Per default, netrw leaves unmodified buffers open. This autocommand
" deletes netrw's buffer once it's hidden (using ':q', for example)
autocmd FileType netrw setl bufhidden=delete

" Set up colors
set background=dark
colorscheme space-vim-dark

" Better search
set hlsearch
set incsearch
set showmatch

" Hide matches on <leader>/
nnoremap <leader>/ :nohlsearch<CR>

" search highlight color
hi Search cterm=NONE ctermbg=LightMagenta ctermfg=Red
hi Search guibg=LightYellow guifg=Red

" Other highlights
hi SpellBad cterm=None ctermbg=LightGray ctermfg=Red
hi SpellCap cterm=None ctermbg=LightCyan ctermfg=Red

" Show trailing whitepace and spaces before a tab:
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/

hi Normal guibg=NONE ctermbg=NONE

"Inactive window colors
let g:diminactive_use_colorcolumn = 1
let g:diminactive_use_syntax = 1
let g:diminactive_enable_focus = 1

